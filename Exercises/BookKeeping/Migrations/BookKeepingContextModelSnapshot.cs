// <auto-generated />
using System;
using BookKeeping.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookKeeping.Migrations
{
    [DbContext(typeof(BookKeepingContext))]
    partial class BookKeepingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.Property<Guid>("AuthorsIdentity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersIdentity")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsIdentity", "PublishersIdentity");

                    b.HasIndex("PublishersIdentity");

                    b.ToTable("AuthorPublisher");
                });

            modelBuilder.Entity("BookKeeping.Domain.Address", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Identity");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Identity", "City", "Street", "Number")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BookKeeping.Domain.Author", b =>
                {
                    b.Property<Guid>("Identity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("YearOfBirth")
                        .HasColumnType("bigint");

                    b.HasKey("Identity");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookKeeping.Domain.Book", b =>
                {
                    b.Property<Guid?>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Afterword")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("No content.");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Identity");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookKeeping.Domain.BookContent", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Identity");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookContents");
                });

            modelBuilder.Entity("BookKeeping.Domain.Cabinet", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Identity");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("BookKeeping.Domain.Customer", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Identity");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookKeeping.Domain.Editor", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Identity");

                    b.HasIndex("PublisherId")
                        .IsUnique()
                        .HasFilter("[PublisherId] IS NOT NULL");

                    b.ToTable("Editors");

                    b.HasData(
                        new
                        {
                            Identity = new Guid("ad57b818-2f0c-4fe2-815a-29f01846fe79"),
                            FirstName = "John",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("BookKeeping.Domain.Loan", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Identity");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("ReaderId")
                        .IsUnique();

                    b.ToTable("Loans", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("LoansHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("BookKeeping.Domain.Publisher", b =>
                {
                    b.Property<Guid?>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Identity");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Identity = new Guid("08cd5199-d8f0-4e17-b32e-04e2884e3720"),
                            Name = "Publisher Works"
                        },
                        new
                        {
                            Identity = new Guid("a4320bae-69d1-4270-ac77-a497fe4395f4"),
                            Name = "Math works"
                        });
                });

            modelBuilder.Entity("BookKeeping.Domain.Reader", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("LastName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Identity");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BookKeeping.Domain.Reservation", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Identity");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("ReaderId")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BookKeeping.Domain.Writing", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Identity");

                    b.ToTable("Writings");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("BookKeeping.Domain.Ad", b =>
                {
                    b.HasBaseType("BookKeeping.Domain.Writing");

                    b.Property<string>("Advertiser")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.ToTable("Ad");
                });

            modelBuilder.Entity("BookKeeping.Domain.JobOffer", b =>
                {
                    b.HasBaseType("BookKeeping.Domain.Writing");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.ToTable("JobOffer");
                });

            modelBuilder.Entity("BookKeeping.Domain.NewsArticle", b =>
                {
                    b.HasBaseType("BookKeeping.Domain.Writing");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.ToTable("NewsArticle");
                });

            modelBuilder.Entity("AuthorPublisher", b =>
                {
                    b.HasOne("BookKeeping.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookKeeping.Domain.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookKeeping.Domain.Address", b =>
                {
                    b.HasOne("BookKeeping.Domain.Author", "Author")
                        .WithMany("Addresses")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookKeeping.Domain.Book", b =>
                {
                    b.HasOne("BookKeeping.Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookKeeping.Domain.BookContent", b =>
                {
                    b.HasOne("BookKeeping.Domain.Book", null)
                        .WithOne("Content")
                        .HasForeignKey("BookKeeping.Domain.BookContent", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookKeeping.Domain.Cabinet", b =>
                {
                    b.OwnsMany("BookKeeping.Domain.Shelf", "Shelves", b1 =>
                        {
                            b1.Property<Guid>("CabinetIdentity")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("RowNumber")
                                .HasColumnType("int");

                            b1.HasKey("CabinetIdentity", "Id");

                            b1.ToTable("Shelves", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CabinetIdentity");
                        });

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("BookKeeping.Domain.Customer", b =>
                {
                    b.OwnsOne("BookKeeping.Domain.ContactDetails", "ContactAndPayment", b1 =>
                        {
                            b1.Property<Guid>("CustomerIdentity")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(1024)
                                .IsUnicode(false)
                                .HasColumnType("varchar(1024)");

                            b1.HasKey("CustomerIdentity");

                            b1.ToTable("Customers");

                            b1.ToJson("ContactAndPayment");

                            b1.WithOwner()
                                .HasForeignKey("CustomerIdentity");

                            b1.OwnsOne("BookKeeping.Domain.BankDetails", "BankDetails", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsCustomerIdentity")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("BIC")
                                        .IsRequired()
                                        .HasMaxLength(1024)
                                        .IsUnicode(false)
                                        .HasColumnType("varchar(1024)");

                                    b2.Property<string>("IBAN")
                                        .IsRequired()
                                        .HasMaxLength(1024)
                                        .IsUnicode(false)
                                        .HasColumnType("varchar(1024)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(1024)
                                        .IsUnicode(false)
                                        .HasColumnType("varchar(1024)");

                                    b2.HasKey("ContactDetailsCustomerIdentity");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsCustomerIdentity");

                                    b2.OwnsMany("BookKeeping.Domain.CreditCard", "CreditCards", b3 =>
                                        {
                                            b3.Property<Guid>("BankDetailsContactDetailsCustomerIdentity")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int");

                                            b3.Property<string>("CVC")
                                                .IsRequired()
                                                .HasMaxLength(1024)
                                                .IsUnicode(false)
                                                .HasColumnType("varchar(1024)");

                                            b3.Property<DateTime>("Expiration")
                                                .HasColumnType("datetime2");

                                            b3.Property<string>("Name")
                                                .IsRequired()
                                                .HasMaxLength(1024)
                                                .IsUnicode(false)
                                                .HasColumnType("varchar(1024)");

                                            b3.Property<string>("Serial")
                                                .IsRequired()
                                                .HasMaxLength(1024)
                                                .IsUnicode(false)
                                                .HasColumnType("varchar(1024)");

                                            b3.HasKey("BankDetailsContactDetailsCustomerIdentity", "Id");

                                            b3.ToTable("Customers");

                                            b3.WithOwner()
                                                .HasForeignKey("BankDetailsContactDetailsCustomerIdentity");
                                        });

                                    b2.Navigation("CreditCards");
                                });

                            b1.Navigation("BankDetails")
                                .IsRequired();
                        });

                    b.Navigation("ContactAndPayment");
                });

            modelBuilder.Entity("BookKeeping.Domain.Editor", b =>
                {
                    b.HasOne("BookKeeping.Domain.Publisher", "Publisher")
                        .WithOne("Editor")
                        .HasForeignKey("BookKeeping.Domain.Editor", "PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookKeeping.Domain.Loan", b =>
                {
                    b.HasOne("BookKeeping.Domain.Book", null)
                        .WithOne("Loan")
                        .HasForeignKey("BookKeeping.Domain.Loan", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookKeeping.Domain.Reader", "Reader")
                        .WithOne("Loan")
                        .HasForeignKey("BookKeeping.Domain.Loan", "ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("BookKeeping.Domain.Reservation", b =>
                {
                    b.HasOne("BookKeeping.Domain.Book", null)
                        .WithOne("Reservation")
                        .HasForeignKey("BookKeeping.Domain.Reservation", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookKeeping.Domain.Reader", null)
                        .WithOne("Reservation")
                        .HasForeignKey("BookKeeping.Domain.Reservation", "ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookKeeping.Domain.Author", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookKeeping.Domain.Book", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("Loan");

                    b.Navigation("Reservation")
                        .IsRequired();
                });

            modelBuilder.Entity("BookKeeping.Domain.Publisher", b =>
                {
                    b.Navigation("Editor");
                });

            modelBuilder.Entity("BookKeeping.Domain.Reader", b =>
                {
                    b.Navigation("Loan");

                    b.Navigation("Reservation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
