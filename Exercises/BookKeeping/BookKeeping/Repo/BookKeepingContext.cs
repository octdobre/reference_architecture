using System.Reflection;
using BookKeeping.Domain;
using Microsoft.EntityFrameworkCore;

namespace BookKeeping.Repo;

/// <summary>
/// DbContext supports the following features:
/// Database Connections
/// Data operations such as querying and persistence
/// Change Tracking (EntityState)
/// Model building
/// Data Mapping
/// Object caching
/// Transaction management
/// </summary>
public class BookKeepingContext : DbContext
{
    /// <summary>
    /// Constructor needed for migrations creation
    /// </summary>
    public BookKeepingContext(DbContextOptions<BookKeepingContext> contextOptions) : base(contextOptions)
    {

    }

    public DbSet<Book> Books { get; set; }

    public DbSet<Author> Authors { get; set; }

    public DbSet<Publisher> Publishers { get; set; }

    public DbSet<Editor> Editors { get; set; }

    public DbSet<Address> Addresses { get; set; }

    public DbSet<Reader> Readers { get; set; }

    public DbSet<Reservation> Reservations { get; set; }

    public DbSet<BookContent> BookContents { get; set; }

    public DbSet<Loan> Loans { get; set; }

    public DbSet<Cabinet> Cabinets { get; set; }

    public DbSet<Customer> Customers { get; set; }

    public DbSet<Writing> Writings { get; set; }

    protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)
    {
        /*
         * Pre-convention Model Configuration
         * Configures specific types to have specific values when not specified
         * globally for all tables.
         */
        configurationBuilder
            .Properties<string>()
            .AreUnicode(false)
            .HaveMaxLength(1024);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //Primary Key
        modelBuilder.Entity<Book>()
            .HasKey(b => b.Identity);

        modelBuilder.Entity<Book>()
            .Property(a => a.Identity)
            //Identity value is generated by the database if not specified
            //If specified then no database value is generated
            .ValueGeneratedOnAdd();

        //modelBuilder.Entity<Book>()
        //    .Property(b => b.Identity)
        //    //Specifies that the database should not automatically generate values for the property
        //    .ValueGeneratedNever();

        //Unique index constraint
        modelBuilder.Entity<Book>()
            .HasIndex(a => a.Title)
            .IsUnique();

        ////Places a unique index constraint
        //.HasAlternateKey(a => a.Title);

        //Not nullable & max length
        modelBuilder.Entity<Book>()
            .Property(b => b.Title)
            .IsRequired()
            .HasMaxLength(250);

        // default value int, string, bool
        modelBuilder.Entity<Book>()
            .Property(b => b.Afterword)
            .HasMaxLength(1000)
            .HasDefaultValue("No content.");

        modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

        //way to apply configurations manually
        //modelBuilder.ApplyConfiguration(new AuthorConfiguration());
        //modelBuilder.ApplyConfiguration(new PublisherConfiguration());
        //modelBuilder.ApplyConfiguration(new EditorConfiguration());
        //modelBuilder.ApplyConfiguration(new AddressConfiguration());


        modelBuilder.Entity<NewsArticle>();
        modelBuilder.Entity<Ad>();
        modelBuilder.Entity<JobOffer>();
    }
}